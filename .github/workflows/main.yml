name: Build and Test JPG Barcode Renamer

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install streamlit pandas pillow pyinstaller opencv-python-headless pyzbar qrcode numpy
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libzbar0
    
    - name: Test main scripts
      run: |
        python -m py_compile app.py
        python -m py_compile barcode_processor.py
        python -m py_compile desktop_app.py
        python -m py_compile launcher.py
        python -m py_compile build_exe.py
        python -m py_compile create_portable_app.py

  build-executables:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            executable-suffix: '.exe'
          - os: ubuntu-latest
            executable-suffix: ''
          - os: macos-latest
            executable-suffix: ''

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller streamlit pandas pillow opencv-python-headless pyzbar qrcode numpy
    
    - name: Install system dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y libzbar0
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install zbar
        fi
    
    - name: Build Desktop App
      run: |
        pyinstaller --onefile --console --name JPG_Barcode_Renamer_Desktop_${{ matrix.os }} --hidden-import=pyzbar.pyzbar --add-data "barcode_processor.py:." desktop_app.py
    
    - name: Build Streamlit Launcher
      run: |
        pyinstaller --onefile --console --name JPG_Barcode_Renamer_Web_${{ matrix.os }} --hidden-import=pyzbar.pyzbar --add-data "app.py:." --add-data "barcode_processor.py:." launcher.py
    
    - name: Create Portable Package
      run: |
        python create_portable_app.py
    
    - name: Upload executables
      uses: actions/upload-artifact@v4
      with:
        name: executables-${{ matrix.os }}
        path: |
          dist/JPG_Barcode_Renamer_Desktop_${{ matrix.os }}${{ matrix.executable-suffix }}
          dist/JPG_Barcode_Renamer_Web_${{ matrix.os }}${{ matrix.executable-suffix }}
          dist/JPG_Barcode_Renamer_Portable.zip

  build-web-app:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install streamlit pandas pillow pyinstaller opencv-python-headless pyzbar qrcode numpy
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libzbar0
    
    - name: Test Streamlit app
      run: |
        python -c "import app; import barcode_processor; print('Streamlit app imports successfully')"
    
    - name: Create distribution package
      run: |
        mkdir -p dist-web
        cp -r . dist-web/
        cd dist-web
        # Remove unnecessary files
        rm -rf .git .github __pycache__ *.pyc
        # Create requirements.txt
        echo "streamlit>=1.48.1" > requirements.txt
        echo "pandas>=2.3.1" >> requirements.txt
        echo "pillow>=11.3.0" >> requirements.txt
        echo "opencv-python>=4.12.0.88" >> requirements.txt
        echo "pyzbar>=0.1.9" >> requirements.txt
        echo "qrcode>=8.2" >> requirements.txt
        echo "numpy>=2.2.6" >> requirements.txt
        echo "pyinstaller>=6.15.0" >> requirements.txt
        tar -czf ../jpg-barcode-renamer.tar.gz .
    
    - name: Upload web app package
      uses: actions/upload-artifact@v4
      with:
        name: web-app-package
        path: jpg-barcode-renamer.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: [test, build-executables, build-web-app]
    if: github.event_name == 'release'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Copy executables
        cp executables-windows-latest/* release-assets/ 2>/dev/null || true
        cp executables-ubuntu-latest/* release-assets/ 2>/dev/null || true
        cp executables-macos-latest/* release-assets/ 2>/dev/null || true
        
        # Copy web app package
        cp web-app-package/* release-assets/ 2>/dev/null || true
        
        # List all files
        ls -la release-assets/
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        # Install system dependencies for OpenCV and zbar
        RUN apt-get update && apt-get install -y \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            libzbar0 \
            && rm -rf /var/lib/apt/lists/*

        # Set working directory
        WORKDIR /app

        # Copy requirements and install Python dependencies
        COPY . .
        RUN pip install --no-cache-dir streamlit pandas pillow opencv-python-headless pyzbar qrcode numpy

        # Expose port
        EXPOSE 8501

        # Run the Streamlit application
        CMD ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t jpg-barcode-renamer .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8501:8501 --name test-container jpg-barcode-renamer
        sleep 15
        curl -f http://localhost:8501 || exit 1
        docker stop test-container
