import streamlit as st
import os
import pandas as pd
from pathlib import Path
from barcode_processor import BarcodeProcessor
import time

def main():
    st.set_page_config(
        page_title="JPG Barcode Renamer",
        page_icon="üì∑",
        layout="wide"
    )
    
    st.title("üì∑ JPG Barcode Renamer")
    st.markdown("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå JPG ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    
    # Initialize session state
    if 'processed_files' not in st.session_state:
        st.session_state.processed_files = None
    if 'preview_data' not in st.session_state:
        st.session_state.preview_data = None
    if 'selected_folder' not in st.session_state:
        st.session_state.selected_folder = ""
    
    # Folder selection
    st.header("1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå JPG")
    folder_path = st.text_input(
        "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:",
        value=st.session_state.selected_folder,
        placeholder="‡πÄ‡∏ä‡πà‡∏ô /path/to/your/jpg/files ‡∏´‡∏£‡∏∑‡∏≠ C:\\path\\to\\your\\jpg\\files",
        help="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå JPG ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠"
    )
    
    if folder_path and folder_path != st.session_state.selected_folder:
        st.session_state.selected_folder = folder_path
        st.session_state.processed_files = None
        st.session_state.preview_data = None
    
    if folder_path:
        if not os.path.exists(folder_path):
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder_path}")
            st.info("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return
        
        if not os.path.isdir(folder_path):
            st.error(f"‚ùå ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder_path}")
            return
        
        # Find JPG files
        jpg_files = []
        for ext in ['*.jpg', '*.jpeg', '*.JPG', '*.JPEG']:
            jpg_files.extend(Path(folder_path).glob(ext))
        
        if not jpg_files:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder_path}")
            return
        
        st.success(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(jpg_files)} ‡πÑ‡∏ü‡∏•‡πå")
        
        # Process files button
        st.header("2. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå")
        col1, col2 = st.columns([1, 3])
        
        with col1:
            if st.button("üîç ‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î", type="primary"):
                process_files(jpg_files)
        
        with col2:
            st.info("üí° ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        # Show preview if available
        if st.session_state.preview_data is not None:
            show_preview()
        
        # Show results if available
        if st.session_state.processed_files is not None:
            show_results()

def process_files(jpg_files):
    """Process JPG files to extract barcode data"""
    processor = BarcodeProcessor()
    
    # Progress bar
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    preview_data = []
    total_files = len(jpg_files)
    
    for i, file_path in enumerate(jpg_files):
        progress = (i + 1) / total_files
        progress_bar.progress(progress)
        status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {file_path.name} ({i + 1}/{total_files})")
        
        result = processor.process_file(file_path)
        result['original_name'] = file_path.name
        result['file_path'] = str(file_path)
        preview_data.append(result)
    
    status_text.text("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    progress_bar.empty()
    status_text.empty()
    
    st.session_state.preview_data = preview_data

def show_preview():
    """Show preview of rename operations"""
    st.header("3. ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")
    
    preview_data = st.session_state.preview_data
    successful_files = [item for item in preview_data if item['success']]
    failed_files = [item for item in preview_data if not item['success']]
    
    # Summary
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìä ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(preview_data))
    with col2:
        st.metric("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", len(successful_files))
    with col3:
        st.metric("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", len(failed_files))
    
    if successful_files:
        st.subheader("‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ")
        
        # Create DataFrame for successful files
        success_df = pd.DataFrame([
            {
                '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°': item['original_name'],
                '‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà': item['new_name'],
                '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î': item['barcode_data'],
                '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î': item['barcode_type']
            }
            for item in successful_files
        ])
        
        st.dataframe(success_df, use_container_width=True)
        
        # Rename button
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå", type="primary"):
                rename_files(successful_files)
        with col2:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ")
    
    if failed_files:
        st.subheader("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ")
        
        # Create DataFrame for failed files
        fail_df = pd.DataFrame([
            {
                '‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå': item['original_name'],
                '‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏': item['error']
            }
            for item in failed_files
        ])
        
        st.dataframe(fail_df, use_container_width=True)

def rename_files(successful_files):
    """Actually rename the files"""
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    results = []
    total_files = len(successful_files)
    
    for i, file_info in enumerate(successful_files):
        progress = (i + 1) / total_files
        progress_bar.progress(progress)
        status_text.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠: {file_info['original_name']} ‚Üí {file_info['new_name']}")
        
        try:
            original_path = Path(file_info['file_path'])
            new_path = original_path.parent / file_info['new_name']
            
            # Check if new filename already exists
            if new_path.exists():
                # Add number suffix to avoid conflicts
                base_name = new_path.stem
                extension = new_path.suffix
                counter = 1
                while new_path.exists():
                    new_path = original_path.parent / f"{base_name}_{counter}{extension}"
                    counter += 1
            
            original_path.rename(new_path)
            results.append({
                'original_name': file_info['original_name'],
                'new_name': new_path.name,
                'success': True,
                'error': None
            })
        except Exception as e:
            results.append({
                'original_name': file_info['original_name'],
                'new_name': file_info['new_name'],
                'success': False,
                'error': str(e)
            })
    
    progress_bar.empty()
    status_text.empty()
    
    st.session_state.processed_files = results
    st.session_state.preview_data = None

def show_results():
    """Show final results of rename operations"""
    st.header("4. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå")
    
    results = st.session_state.processed_files
    successful_renames = [r for r in results if r['success']]
    failed_renames = [r for r in results if not r['success']]
    
    # Summary
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìä ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(results))
    with col2:
        st.metric("‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", len(successful_renames))
    with col3:
        st.metric("‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", len(failed_renames))
    
    if successful_renames:
        st.subheader("‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        success_df = pd.DataFrame([
            {
                '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°': item['original_name'],
                '‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà': item['new_name']
            }
            for item in successful_renames
        ])
        st.dataframe(success_df, use_container_width=True)
    
    if failed_renames:
        st.subheader("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        fail_df = pd.DataFrame([
            {
                '‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå': item['original_name'],
                '‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏': item['error']
            }
            for item in failed_renames
        ])
        st.dataframe(fail_df, use_container_width=True)
    
    # Reset button
    if st.button("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà"):
        st.session_state.processed_files = None
        st.session_state.preview_data = None
        st.rerun()

if __name__ == "__main__":
    main()
